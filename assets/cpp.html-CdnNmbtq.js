import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as a,o as e}from"./app-DZpXGRNi.js";const n="/assets/images/cpp_logo.png",h={};function l(r,i){return e(),t("div",null,i[0]||(i[0]=[a('<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="c-编程语言全解-起源、设计理念、底层逻辑与实战技巧" tabindex="-1"><a class="header-anchor" href="#c-编程语言全解-起源、设计理念、底层逻辑与实战技巧"><span>[C++] 编程语言全解：起源、设计理念、底层逻辑与实战技巧</span></a></h1><figure><img src="'+n+`" alt="C++" tabindex="0" loading="lazy"><figcaption>C++</figcaption></figure><blockquote><p><em>“C++ 不只是编程语言，更是通向高性能与系统控制的大门。”</em></p></blockquote><hr><h2 id="🧬-1-起源-c-是怎么来的" tabindex="-1"><a class="header-anchor" href="#🧬-1-起源-c-是怎么来的"><span>🧬 1. 起源：C++ 是怎么来的？</span></a></h2><ul><li><strong>创始人：</strong> Bjarne Stroustrup（丹麦计算机科学家）</li><li><strong>诞生时间：</strong> 1979 年（最初为 &quot;C with Classes&quot;）</li><li><strong>首次发布：</strong> 1985 年命名为 C++</li></ul><h3 id="🏗-初衷" tabindex="-1"><a class="header-anchor" href="#🏗-初衷"><span>🏗 初衷：</span></a></h3><blockquote><p>在不牺牲性能的前提下，为 C 语言引入面向对象编程（OOP）能力。</p></blockquote><hr><h2 id="💡-2-c-的设计理念与语言特色" tabindex="-1"><a class="header-anchor" href="#💡-2-c-的设计理念与语言特色"><span>💡 2. C++ 的设计理念与语言特色</span></a></h2><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>面向对象 + 泛型</td><td>支持类、继承、封装、多态，模板支持泛型编程</td></tr><tr><td>高性能</td><td>接近硬件级别控制，适用于系统底层开发</td></tr><tr><td>静态强类型</td><td>编译期类型检查，避免运行时错误</td></tr><tr><td>RAII 资源管理</td><td>构造 + 析构自动管理资源（智能指针等）</td></tr><tr><td>向后兼容 C</td><td>可直接调用 C 函数库、系统接口</td></tr><tr><td>编译型语言</td><td>源代码通过编译器转换为机器代码，提高执行效率</td></tr></tbody></table><hr><h2 id="⚙️-3-底层逻辑简析-c-是如何运行的" tabindex="-1"><a class="header-anchor" href="#⚙️-3-底层逻辑简析-c-是如何运行的"><span>⚙️ 3. 底层逻辑简析：C++ 是如何运行的？</span></a></h2><p>C++ 是一门<strong>编译型语言</strong>，源代码需要经过编译过程转成机器码才能运行。</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A[.cpp 文件] --&gt; B[预处理器]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B --&gt; C[编译器（g++）]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C --&gt; D[目标文件 .o]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D --&gt; E[链接器 ld]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E --&gt; F[可执行文件]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚀-编译过程关键阶段" tabindex="-1"><a class="header-anchor" href="#🚀-编译过程关键阶段"><span>🚀 编译过程关键阶段：</span></a></h3><ol><li><strong>预处理</strong>：处理 <code>#include</code>、<code>#define</code> 等宏</li><li><strong>编译</strong>：转为中间汇编代码</li><li><strong>汇编</strong>：生成 <code>.o</code> 文件（目标文件）</li><li><strong>链接</strong>：整合库文件，生成可执行程序</li></ol><hr><h2 id="✍️-4-基础语法与开发技巧" tabindex="-1"><a class="header-anchor" href="#✍️-4-基础语法与开发技巧"><span>✍️ 4. 基础语法与开发技巧</span></a></h2><h3 id="✅-hello-world" tabindex="-1"><a class="header-anchor" href="#✅-hello-world"><span>✅ Hello World</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, C++!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-类与对象" tabindex="-1"><a class="header-anchor" href="#✅-类与对象"><span>✅ 类与对象</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Car</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    string brand;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Car</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">brand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b) {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> honk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> brand </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; says beep!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl; }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-模板函数-泛型" tabindex="-1"><a class="header-anchor" href="#✅-模板函数-泛型"><span>✅ 模板函数（泛型）</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-智能指针-c-11" tabindex="-1"><a class="header-anchor" href="#✅-智能指针-c-11"><span>✅ 智能指针（C++11）</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">unique_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-lambda-表达式-c-11" tabindex="-1"><a class="header-anchor" href="#✅-lambda-表达式-c-11"><span>✅ Lambda 表达式（C++11+）</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [](</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b; };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🧠-5-c-常见陷阱与实用技巧" tabindex="-1"><a class="header-anchor" href="#🧠-5-c-常见陷阱与实用技巧"><span>🧠 5. C++ 常见陷阱与实用技巧</span></a></h2><table><thead><tr><th>技巧</th><th>说明</th></tr></thead><tbody><tr><td>避免裸指针使用</td><td>使用 <code>std::shared_ptr</code> / <code>unique_ptr</code> 管理内存</td></tr><tr><td>熟练使用 STL（标准模板库）</td><td>如：<code>vector</code>、<code>map</code>、<code>algorithm</code></td></tr><tr><td>RAII 模式</td><td>构造时申请资源，析构时自动释放</td></tr><tr><td>善用 const、引用、值传递差异</td><td>提升代码安全与性能</td></tr><tr><td>多态用虚函数实现</td><td>使用 <code>virtual</code> 关键字支持运行时动态分发</td></tr></tbody></table><hr><h2 id="🧩-6-c-的应用场景" tabindex="-1"><a class="header-anchor" href="#🧩-6-c-的应用场景"><span>🧩 6. C++ 的应用场景</span></a></h2><p>C++ 在性能要求高或资源受限的场景中无可替代。</p><table><thead><tr><th>应用领域</th><th>说明</th></tr></thead><tbody><tr><td>操作系统开发</td><td>Linux、Windows 内核部分采用 C/C++</td></tr><tr><td>嵌入式系统</td><td>IoT、芯片驱动程序</td></tr><tr><td>游戏开发</td><td>Unreal Engine、Unity 底层使用 C++</td></tr><tr><td>金融高频交易系统</td><td>要求低延迟、高吞吐，C++ 是首选</td></tr><tr><td>图形引擎</td><td>OpenGL、DirectX、图形渲染管线</td></tr><tr><td>浏览器内核</td><td>Chromium、Firefox 均基于 C++</td></tr></tbody></table><hr><h2 id="🔧-7-c-标准演进-现代化之路" tabindex="-1"><a class="header-anchor" href="#🔧-7-c-标准演进-现代化之路"><span>🔧 7. C++ 标准演进（现代化之路）</span></a></h2><table><thead><tr><th>标准版本</th><th>特性亮点</th></tr></thead><tbody><tr><td>C++98</td><td>初版标准，基础面向对象支持</td></tr><tr><td>C++11</td><td>Lambda、智能指针、auto 类型推断</td></tr><tr><td>C++14</td><td>语法简化、泛型增强</td></tr><tr><td>C++17</td><td>结构化绑定、文件系统库</td></tr><tr><td>C++20</td><td>协程（coroutines）、模块化</td></tr><tr><td>C++23</td><td>扩展 constexpr、增强模板编程支持</td></tr></tbody></table><hr><h2 id="📚-8-学习资源推荐" tabindex="-1"><a class="header-anchor" href="#📚-8-学习资源推荐"><span>📚 8. 学习资源推荐</span></a></h2><table><thead><tr><th>类型</th><th>资源名称</th></tr></thead><tbody><tr><td>官方文档</td><td><a href="https://en.cppreference.com/" target="_blank" rel="noopener noreferrer">C++ Reference</a></td></tr><tr><td>入门课程</td><td>B站《C++ 教程》、《小甲鱼 C++》</td></tr><tr><td>实战书籍</td><td>《C++ Primer》《Effective C++》</td></tr><tr><td>编程练习</td><td><a href="https://leetcode.cn" target="_blank" rel="noopener noreferrer">LeetCode</a>、<a href="https://codeforces.com/" target="_blank" rel="noopener noreferrer">Codeforces</a></td></tr><tr><td>编译器工具</td><td>GCC / Clang / MSVC</td></tr></tbody></table><hr><h2 id="✅-总结一句话" tabindex="-1"><a class="header-anchor" href="#✅-总结一句话"><span>✅ 总结一句话</span></a></h2><blockquote><p><strong>C++ 是一门“能做一切”的语言，适合构建高性能、底层控制与工程规模兼具的大型系统。</strong></p></blockquote><hr><h2 id="🎯-初学者项目建议" tabindex="-1"><a class="header-anchor" href="#🎯-初学者项目建议"><span>🎯 初学者项目建议</span></a></h2><ul><li>实现一个命令行计算器</li><li>编写文件读写和日志系统</li><li>使用 STL 构建图算法（如 Dijkstra）</li><li>制作小游戏（如贪吃蛇）</li><li>利用 SFML/SDL 实现图形渲染</li></ul><hr><p>👏 如果你喜欢本篇内容，欢迎收藏、分享，也可以留言告诉我是否希望继续推出《C++ STL 全解》《设计模式与 C++ 实战》《现代 C++ 开发项目》等进阶系列！</p><hr>`,52)]))}const k=s(h,[["render",l]]),o=JSON.parse('{"path":"/zh/demo/cpp.html","title":"C++ 编程语言全解","lang":"zh-CN","frontmatter":{"title":"C++ 编程语言全解","icon":"object-group","order":2,"category":["软件开发"],"tag":["C++"],"description":"[C++] 编程语言全解：起源、设计理念、底层逻辑与实战技巧 C++C++ “C++ 不只是编程语言，更是通向高性能与系统控制的大门。” 🧬 1. 起源：C++ 是怎么来的？ 创始人： Bjarne Stroustrup（丹麦计算机科学家） 诞生时间： 1979 年（最初为 \\"C with Classes\\"） 首次发布： 1985 年命名为 C++ ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++ 编程语言全解\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/cpp_logo.png\\"],\\"dateModified\\":\\"2025-04-21T13:50:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HQSIM\\",\\"url\\":\\"https://blog.hqsim.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/demo/cpp.html"}],["meta",{"property":"og:site_name","content":"HQSIM"}],["meta",{"property":"og:title","content":"C++ 编程语言全解"}],["meta",{"property":"og:description","content":"[C++] 编程语言全解：起源、设计理念、底层逻辑与实战技巧 C++C++ “C++ 不只是编程语言，更是通向高性能与系统控制的大门。” 🧬 1. 起源：C++ 是怎么来的？ 创始人： Bjarne Stroustrup（丹麦计算机科学家） 诞生时间： 1979 年（最初为 \\"C with Classes\\"） 首次发布： 1985 年命名为 C++ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/cpp_logo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-21T13:50:56.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:modified_time","content":"2025-04-21T13:50:56.000Z"}]]},"git":{"createdTime":1745243456000,"updatedTime":1745243456000,"contributors":[{"name":"luke","username":"luke","email":"173202461@qq.com","commits":1,"url":"https://github.com/luke"}]},"readingTime":{"minutes":3.45,"words":1035},"filePathRelative":"zh/demo/cpp.md","excerpt":"\\n<h1>[C++] 编程语言全解：起源、设计理念、底层逻辑与实战技巧</h1>\\n<figure><img src=\\"/assets/images/cpp_logo.png\\" alt=\\"C++\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>C++</figcaption></figure>\\n<blockquote>\\n<p><em>“C++ 不只是编程语言，更是通向高性能与系统控制的大门。”</em></p>\\n</blockquote>\\n<hr>\\n<h2>🧬 1. 起源：C++ 是怎么来的？</h2>\\n<ul>\\n<li><strong>创始人：</strong> Bjarne Stroustrup（丹麦计算机科学家）</li>\\n<li><strong>诞生时间：</strong> 1979 年（最初为 \\"C with Classes\\"）</li>\\n<li><strong>首次发布：</strong> 1985 年命名为 C++</li>\\n</ul>","autoDesc":true}');export{k as comp,o as data};
